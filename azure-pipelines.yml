variables:
  # Default version of Python used in build steps
  build_python_version: '3.6'
  # Name of the zipped dist files when stored as an artifact in Azure
  dist_artifact: Flying_Circus_Wheel
  # Inline Python command that can be used to validate an install of the library
  validation_script: 'import flyingcircus; s = flyingcircus.core.Stack(); print(s.export())'

trigger:
  - master

pr:
  - master

stages:
  - stage: Checks
    jobs:
      - job: CodeStyle
        timeoutInMinutes: 5
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(build_python_version)
            displayName: 'Use Python $(build_python_version)'

          - script: |
              python -m pip install --upgrade pip
              pip install black
              black --check src setup.py tests tools
            displayName: 'black'

      - job: Test
        timeoutInMinutes: 10
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            Python36:
              python.version: '3.6'
            Python37:
              python.version: '3.7'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              pip install pytest-azurepipelines
            displayName: 'Install dependencies'

          - script: |
              pytest tests
            displayName: 'pytest'

      - job: WillThisBeARelease
        dependsOn: Test
        condition: |
          and(
            succeeded(),
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            contains(variables['Build.SourceVersionMessage'], '[ci release]')
          )
        timeoutInMinutes: 1
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo This build will be released to PyPI
            displayName: 'Just a print statement'

  - stage: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: BuildWheel
        timeoutInMinutes: 5
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(build_python_version)
            displayName: 'Use Python $(build_python_version)'

          - script: |
              python -m pip install --upgrade pip
              pip install -U twine wheel
            displayName: 'Install dependencies'

          - script: |
              python setup.py sdist bdist_wheel
              twine check dist/*
            displayName: 'Build wheel'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: dist/
              artifactName: $(dist_artifact)
            displayName: 'Publish Artifacts in Azure'

      - job: Validate
        dependsOn: BuildWheel
        timeoutInMinutes: 5
        pool:
          vmImage: 'ubuntu-latest'
        # FIXME use a strategy matrix here for multiple OS'es in vm
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(build_python_version)'
            displayName: 'Use Python $(build_python_version)'

          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(dist_artifact)'
              itemPattern: '**'
              downloadPath: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Download Artifact'

          - script: |
              python -m pip install --upgrade pip
              ls $(Build.ArtifactStagingDirectory)/$(dist_artifact)/
              find $(Build.ArtifactStagingDirectory)/$(dist_artifact)/*.whl | xargs pip install
              python -c "$(validation_script)"
            displayName: 'Validate Wheel'

  - stage: Release
    # There isn't a way to add a manual approval step to a pipeline (I think
    # you're supposed to use a separate Release Pipeline, but they aren't
    # available as IaC yet), so we fudge it by using a special keyword in
    # the commit message
    condition: |
      and(
        succeeded(),
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        contains(variables['Build.SourceVersionMessage'], '[ci release]')
      )
    jobs:
      - deployment: PyPiLive
        # TODO As of July 2019 you can't set a timeout on a deployment job,
        # notwithstanding what the documentation says
        #timeoutInMinutes: 5
        pool:
          vmImage: 'ubuntu-latest'
        environment: pypi-live
        strategy:
          runOnce:
            deploy:
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: $(build_python_version)
                  displayName: 'Use Python $(build_python_version)'

                - script: |
                    python -m pip install --upgrade pip
                    pip install -U twine wheel
                  displayName: 'Install dependencies'

                - task: TwineAuthenticate@0
                  inputs:
                    # This magic string is the name of a "Service Connection"
                    # in the "Settings" section of our Azure DevOps project,
                    # of type "Python package upload"
                    externalFeeds: 'PyPI'
                  displayName: 'Authenticate For PyPI'

                - script: |
                    # Note that automatic downloads in a deployment job are
                    # put into the workspace under the artifact name (and not,
                    # say, the temporary artifacts directory).
                    twine upload -r PyPI --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/$(dist_artifact)/
                  displayName: 'Upload to PyPI'
