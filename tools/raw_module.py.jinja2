"""Raw representations of every data type in the AWS {{ service.name }} service.
{%- if service.documentation.url %}

See Also:
    `AWS developer guide for {{ service.name }}
    <{{ service.documentation.url }}>`_
{%- endif %}

This file is automatically generated, and should not be directly edited.
"""

from ..core import Resource

__all__ = [
{%- for resource_name, resource in service.resources.items() | sort %}
    "{{ resource_name }}",
{%- endfor %}
]

{%- for resource_name, resource in service.resources.items() | sort %}


class {{ resource_name }}(Resource):
    """A {{ resource.friendly_name }} for {{ service.name }}.

    See Also:
        `AWS Cloud Formation documentation for {{ resource_name }}
        <{{ resource.Documentation }}>`_
    """
{%- if resource.extra_aws_attributes %}

    # NB: {{ " and ".join(resource.extra_aws_attributes) }} can be set for {{ resource_name }}
    # (unlike most Resource types)
    AWS_ATTRIBUTES = Resource.AWS_ATTRIBUTES.union({
{%- for attribname in resource.extra_aws_attributes %}
        "{{ attribname }}",
{%- endfor %}
    })
{%- endif %}

    RESOURCE_TYPE = "{{ resource.type.fullname }}"

    RESOURCE_PROPERTIES = {
{%- for property in resource.Properties.keys() | sort %}
        "{{ property }}",
{%- endfor %}
    }
{%- if resource.extra_aws_attributes %}

    # noinspection PyPep8Naming
    def __init__(
            self, {% if "CreationPolicy" in resource.extra_aws_attributes %}CreationPolicy=None, {% endif %}DeletionPolicy=None, DependsOn=None,
            Properties=None{% if "UpdatePolicy" in resource.extra_aws_attributes %}, UpdatePolicy=None{% endif %}
    ):
        # TODO This seems unnecessarily complex and generic. Why not just generate the code we need? Are there any other concrete use cases for _split_current_attributes().
        current_attribs, other_params = self._split_current_attributes(locals())
        Resource.__init__(**other_params)
        self._set_constructor_attributes(current_attribs)
{%- endif %}
{%- endfor %}

